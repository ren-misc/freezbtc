{"version":3,"sources":["App.tsx","index.tsx"],"names":["contractAddress","btcToUsd","value","BigNumber","div","exponentiatedBy","times","toFixed","App","React","useState","previousAmount","setPreviousAmount","nextAmount","setNextAmount","message","error","setError","bitcoinAddress","setBitcoinAddress","gatewayJS","useMemo","GatewayJS","web3","setWeb3","levels","setLevels","updateLevels","a","contract","eth","Contract","ABI","abi","methods","call","nextAmountRead","toString","previousAmountRead","getPastLogs","address","fromBlock","toBlock","topics","utils","sha3","events","OrderedMap","event","rawAmount","amount","decodeParameters","data","playerRaw","slice","player","Buffer","from","set","sortBy","i","toNumber","lastLevel","last","lastAmount","lt","undefined","logError","console","String","earn","open","sendToken","Tokens","BTC","Btc2Eth","suggestedAmount","sendTo","contractFn","contractParams","name","type","fromAscii","recoverTrades","getGateways","previousGateways","Array","values","trade","status","ShiftInStatus","ConfirmedOnEthereum","ShiftOutStatus","ReturnedFromRenVM","gateway","pause","result","on","log","then","catch","useEffect","window","ethereum","web3Provider","enable","currentProvider","Web3","net","getId","setInterval","onChange","target","toReadable","useCallback","readableNextAmount","decimalPlaces","readableEarning","className","map","level","key","placeholder","onClick","style","color","valueSeq","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c797bce.chunk.js","sourcesContent":["import React from \"react\";\nimport GatewayJS, { ShiftInStatus, ShiftOutStatus } from \"@renproject/gateway-js\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport BigNumber from \"bignumber.js\";\nimport { OrderedMap } from \"immutable\";\n\nimport \"./App.scss\";\nimport ABI from \"./contracts/testnet/FreeZBTC.json\";\nimport { FreeZBTC } from \"./lib/contracts/FreeZBTC\";\n\ninterface EthereumProvider {\n  enable(): Promise<void>;\n}\n\ndeclare global {\n  interface Window {\n    web3: Web3 | undefined;\n    ethereum: EthereumProvider | undefined;\n  }\n}\n\n// Replace with your contract's address.\nconst contractAddress = \"0xD6a2962cc91d8D53F34EE9307062dc5C30E24d96\";\nconst contractBlock = \"17132466\";\n\ninterface Level {\n  amount: string;\n  player: string | undefined;\n}\n\n// const numberToHex = (n: number): string => {\n//   const hex = n.toString(16);\n//   const padding = \"0\".repeat(64 - hex.length);\n//   return \"0x\" + padding + hex;\n// };\n\nconst btcToUsd = (value: string | BigNumber): string => {\n  return new BigNumber(value).div(new BigNumber(10).exponentiatedBy(8)).times(8909.76).toFixed(0)\n}\n\nconst App = () => {\n\n  const [previousAmount, setPreviousAmount] = React.useState(\"0\");\n  const [nextAmount, setNextAmount] = React.useState(\"0\");\n  const [message, setMessage] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n  const [bitcoinAddress, setBitcoinAddress] = React.useState(\"\");\n  const gatewayJS = React.useMemo(() => new GatewayJS(\"testnet\"), []);\n  let [web3, setWeb3] = React.useState<Web3 | null>(null);\n  let [levels, setLevels] = React.useState<OrderedMap<string, Level> | null>(null);\n\n  const updateLevels = async () => {\n    if (!web3) {\n      return;\n    }\n    const contract = new web3.eth.Contract(ABI.abi as unknown as AbiItem[], contractAddress) as FreeZBTC;\n    const nextAmountRead = await contract.methods.nextAmount().call();\n    setNextAmount(nextAmountRead.toString());\n\n    const previousAmountRead = await contract.methods.previousAmount().call();\n    setPreviousAmount(previousAmountRead.toString());\n\n    const events = await web3.eth.getPastLogs({\n      address: contractAddress,\n      fromBlock: contractBlock,\n      toBlock: \"latest\",\n      topics: [web3.utils.sha3(\"Deposit(uint256,bytes,bytes)\")],\n    });\n\n    levels = levels || OrderedMap<string, Level>();\n\n    for (const event of events) {\n      const [, rawAmount] = event.topics;\n      const amount = new BigNumber(rawAmount, 16).toFixed();\n      let { 0: playerRaw } = web3.eth.abi.decodeParameters([\"bytes\", \"bytes\"], event.data);\n      if (playerRaw.slice(0, 2) === \"0x\") {\n        playerRaw = playerRaw.slice(2);\n      }\n      const player = Buffer.from(playerRaw, \"hex\").toString();\n      levels = levels.set(amount, { amount, player });\n    }\n\n    levels = levels.sortBy(i => new BigNumber(i.amount).toNumber());\n\n    const lastLevel: Level | undefined = levels.last();\n    let lastAmount = lastLevel ? new BigNumber(lastLevel.amount) : new BigNumber(22500 / 2);\n\n    lastAmount = lastAmount.times(2);\n\n    while (lastAmount.lt(2100000000000000)) {\n      levels = levels.set(lastAmount.toString(), {\n        amount: lastAmount.toString(),\n        player: undefined,\n      });\n\n      lastAmount = lastAmount.times(2);\n    }\n\n    setLevels(levels);\n  }\n\n  const logError = (error: Error | string) => {\n    console.error(error);\n    setError(String(((error || {}) as { message?: string }).message || error));\n  }\n\n  const log = (message: string) => {\n    setMessage(message);\n  }\n\n  const earn = async () => {\n    if (!web3) {\n      return;\n    }\n\n    try {\n      gatewayJS.open({\n        // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n        sendToken: GatewayJS.Tokens.BTC.Btc2Eth,\n\n        // Amount of BTC we are sending (in Satoshis)\n        suggestedAmount: new BigNumber(nextAmount).times(1.001).toFixed(0), // Convert to Satoshis\n\n        // The contract we want to interact with\n        sendTo: contractAddress,\n\n        // The name of the function we want to call\n        contractFn: \"earn\",\n\n        // Arguments expected for calling `earn`\n        contractParams: [\n          {\n            name: \"_bitcoinAddress\",\n            type: \"bytes\",\n            value: web3.utils.fromAscii(bitcoinAddress),\n          }\n        ],\n\n        // confirmationless: true,\n      });\n    } catch (error) {\n      // Handle error\n      console.error(error);\n    }\n  }\n\n  const recoverTrades = async (gatewayJS: GatewayJS) => {\n    // Re-open incomplete trades\n    const previousGateways = await gatewayJS.getGateways();\n    for (const trade of Array.from(previousGateways.values())) {\n      if (trade.status === ShiftInStatus.ConfirmedOnEthereum || trade.status === ShiftOutStatus.ReturnedFromRenVM) { continue; }\n      const gateway = gatewayJS.open(trade);\n      gateway.pause();\n      gateway.result()\n        .on(\"status\", (status) => console.log(`[GOT STATUS] ${status}`))\n        .then(console.log)\n        .catch(console.error);\n    }\n  }\n\n  React.useEffect(() => {\n\n    (async () => {\n      let web3Provider;\n\n      // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n      // Modern dApp browsers...\n      if (window.ethereum) {\n        web3Provider = window.ethereum;\n        try {\n          // Request account access\n          await window.ethereum.enable();\n        } catch (error) {\n          // User denied account access...\n          logError(\"Please allow access to your Web3 wallet.\");\n          return;\n        }\n      }\n      // Legacy dApp browsers...\n      else if (window.web3) {\n        web3Provider = window.web3.currentProvider;\n      }\n      // If no injected web3 instance is detected, fall back to Ganache\n      else {\n        logError(\"Please install MetaMask!\");\n        return;\n      }\n\n      web3 = new Web3(web3Provider as any);\n\n      const networkID = await web3.eth.net.getId();\n      if (networkID !== 42) {\n        logError(\"Please set your network to Kovan.\");\n        return;\n      }\n\n      setWeb3(web3);\n\n      recoverTrades(gatewayJS).catch(console.error);\n\n      updateLevels();\n      setInterval(() => {\n        updateLevels();\n      }, 10 * 1000);\n    })().catch(console.error);\n  }, []);\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBitcoinAddress(event.target.value);\n  }\n\n  const toReadable = React.useCallback((amount: string | BigNumber) => new BigNumber(amount).div(new BigNumber(10).exponentiatedBy(8)).toFixed(), []);\n\n  const readableNextAmount = React.useMemo(() =>\n    new BigNumber(nextAmount).times(1.001).decimalPlaces(0).div(new BigNumber(10).exponentiatedBy(8)).toFixed(),\n    // new BigNumber(nextAmount).div(new BigNumber(10).exponentiatedBy(8)).toFixed(),\n    [nextAmount],\n  );\n\n  const readableEarning = React.useMemo(() =>\n    new BigNumber(nextAmount).div(new BigNumber(10).exponentiatedBy(8)).times(2).toFixed(),\n    [nextAmount],\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"levels\">\n        {levels !== null ? levels.map(level => {\n\n          if (level.amount === nextAmount) {\n            return <div key={level.amount} className={`level`}>\n              <p>Deposit {readableNextAmount} BTC (${btcToUsd(new BigNumber(nextAmount).times(1.001).decimalPlaces(0))}) to get back {readableEarning} BTC from the next player.</p>\n              <p className=\"inputs\">\n                <input onChange={onChange} value={bitcoinAddress} placeholder=\"Bitcoin address\" />\n                <button onClick={() => earn().catch(logError)}>Deposit {readableNextAmount} TESTNET BTC</button>\n              </p>\n              <p>{message}</p>\n              {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n            </div>\n          }\n\n          if (level.amount === previousAmount) {\n            return <div key={level.amount} className={`level ${level.player ? \"level-redeemed\" : \"level-empty\"}`}>\n              <p className=\"yellow\">{level.player && level.player?.slice(0, 6)} about to receive {toReadable(level.amount)} BTC (${btcToUsd(level.amount)})</p>\n            </div>\n          }\n\n          return <div key={level.amount} className={`level ${level.player ? \"level-redeemed\" : \"level-empty\"}`}>\n            {level.player ?\n              <p className=\"green\">{level.player.slice(0, 6)} received {toReadable(level.amount)} BTC (${btcToUsd(level.amount)}) !</p> :\n              <p>{toReadable(level.amount)} BTC (${btcToUsd(level.amount)})</p>\n            }\n          </div>\n        }).valueSeq() : <p>Loading...</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}